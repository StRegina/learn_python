# Функция в python - объект, принимающий аргументы и возвращающий значение.
def add(x, y):
    return x + y
add(5,7) # для вызова
add('abc', 'dfg')

# функция newfunc принимает один аргумент, который запоминается в её лексической области видимости т.е.
# замыкает и возвращает функцию myfunc, которая ожидает один аргумент, но при этом помнит переданный аргумент
# из функции newfunc. Ссылка на функцию myfunc присваивается переменной new, теперь new можно использовать
# как функцию, т.к. она ссылается на неё, передаем ей аргумент new(20), а первый аргумент: 50,запомнился,
# теперь выполняется строка return x + n т.е 20 + 50, результат 70.
def newfunc(n):
    def myfunc(x):
        return x + n
    return newfunc
new = newfunc(50)
new(20)

def func():
    pass # возвращает ничего

def func(a, b, c=2): # c - необязательный аргумент
    return a + b + c

func(1, 2)  # a = 1, b = 2, c = 2 (по умолчанию)
func(1, 2, 3)  # a = 1, b = 2, c = 3
func(a=1, b=3)  # a = 1, b = 3, c = 2
func(a=3, c=6)  # a = 3, c = 6, b не определен, будет ошибка

# Функция также может принимать переменное количество позиционных аргументов, тогда перед именем ставится *
def func(*args):
    return args
func(1,2, 'ab')
func() # возвращает кортеж

# Функция может принимать и произвольное число именованных аргументов, тогда перед именем ставится **
def func(**kwargs):
    return kwargs
func(a=1, b=2, c='ab')
func() # возвращает словарь

# Анонимные функции могут содержать лишь одно выражение. Анонимные функции создаются с помощью инструкции lambda.
# Кроме этого, их не обязательно присваивать к переменной
func = lambda x,y: x + y
func(5, 7)
func('a', 'b')
(lambda x, y: x + y)(5, 7)

func = lambda *args: args
func(1, 2, 3)

func = lambda **kwargs: kwargs
func(a=1, b=2, c='ab')