# Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
# Инкапсуляция делает некоторые из компонент доступными только внутри класса.
# Инкапсуляция в Python работает лишь на уровне соглашения между программистами о том,
# какие атрибуты являются общедоступными, а какие — внутренними.
# Одиночное подчеркивание в начале имени атрибута говорит о том,
# что переменная или метод не предназначен для использования вне методов класса,
# однако атрибут доступен по этому имени.

class A:
    def _private(self):
        print('Это приватный метод!')
a = A()
a._private()

# Двойное подчеркивание в начале имени атрибута даёт большую защиту:
# атрибут становится недоступным по этому имени.

class B:
    def __private(self):
        print('Это приватный метод!')
b = B()
b.__private() # так будет ошибка, т.к. метод не доступен
b._B__private() # так можно обратиться


# Наследование - дочерний класс содержит все атрибуты родительского класса,
# при этом некоторые из них могут быть переопределены или добавлены в дочернем.

class Mydict(dict):
    def get(self, key, default=0):
        return get.dict(self, key, default)
a = dict(a=1, b=2)
b = Mydict(a=1, b=2)

b['c'] = 3 # добавление нового ключа
print(b)

# Полиморфизм - разное поведение одного и того же метода в разных классах.
# Например, мы можем сложить два числа, и можем сложить две строки.
# При этом получим разный результат, так как числа и строки являются разными классами.
a = '1'+'1' # str
b = 1+1 # int